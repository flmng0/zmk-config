/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define U_IDLE_MS 200

#define RESHIFT(NAME, DEFAULT, SHIFTED)          \
    NAME: NAME {                                 \
        compatible = "zmk,behavior-mod-morph";   \
        #binding-cells = <0>;                    \
        bindings = <&kp DEFAULT>, <&kp SHIFTED>; \
        mods = <MOD_LSFT>;                       \
    }

#define BASE_COMBO(NAME, POSA, POSB, OUTPUT) \
    NAME {                                   \
        timeout-ms = <75>;                   \
        layers = <0>;                        \
        key-positions = <POSA POSB>;         \
        bindings = <&kp OUTPUT>;             \
        require-prior-idle-ms = <U_IDLE_MS>; \
    }

#define BASE 0
#define NAV 1
#define NUM 2

/* Defined here so that the keymap can have consistent size. */
#define HRM_R &mt LALT R
#define HRM_S &mt LSHFT S
#define HRM_T &mt LCTRL T
#define HRM_G &mt LGUI G

#define HRM_M &mt RGUI M
#define HRM_N &mt RCTRL N
#define HRM_E &mt RSHFT E
#define HRM_I &mt LALT I

/* TH(umb) L(eft)|R(ight) IN|OUT */
#define TH_LOUT &lt NUM TAB
#define TH_LIN  &lt NAV SPACE
#define TH_RIN  &shcaps
#define TH_ROUT &kp ENTER

#define N_LEFT  &kk HOME LEFT
#define N_DOWN  &kk PG_UP UP
#define N_UP    &kk PG_DOWN DOWN
#define N_RIGHT &kk END RIGHT

/*
 * Helper macros to define the combos given a column coordinate, that use a key and the
 * key directly below it.
 */
#define HIGH_COL_COMBO(NAME, XPOS, OUTPUT) BASE_COMBO(NAME, (XPOS+0), (XPOS+10), OUTPUT)
#define LOW_COL_COMBO(NAME, XPOS, OUTPUT) BASE_COMBO(NAME, (XPOS+10), (XPOS+20), OUTPUT)

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

&lt {
    require-prior-idle-ms = <U_IDLE_MS>;
    flavor = "hold-preferred";
};

&mt {
    require-prior-idle-ms = <U_IDLE_MS>;
    flavor = "balanced";
};

/ {

    combos {
        compatible = "zmk,combos";

        /* Vertical shape combos along the top row of the keyboard. */
        HIGH_COL_COMBO(combo_grave, 1, GRAVE);
        HIGH_COL_COMBO(combo_backslash, 2, BACKSLASH);
        HIGH_COL_COMBO(combo_underscore, 3, UNDERSCORE);
        HIGH_COL_COMBO(combo_tilde, 4, TILDE);

        HIGH_COL_COMBO(combo_equals, 5, EQUAL);
        HIGH_COL_COMBO(combo_hyphen, 6, MINUS);
        HIGH_COL_COMBO(combo_slash, 7, SLASH);
        HIGH_COL_COMBO(combo_pipe, 8, PIPE);
        
        /* Vertical shape combos along the bottom row of the keyboard. */
        LOW_COL_COMBO(combo_at, 1, AT_SIGN);
        LOW_COL_COMBO(combo_pound, 2, POUND);
        LOW_COL_COMBO(combo_dollar, 3, DOLLAR);
        LOW_COL_COMBO(combo_percent, 4, PERCENT);

        LOW_COL_COMBO(combo_caret, 5, CARET);
        LOW_COL_COMBO(combo_plus, 6, PLUS);
        LOW_COL_COMBO(combo_asterisk, 7, ASTERISK);
        LOW_COL_COMBO(combo_ampersand, 8, AMPERSAND);

        /* () */
        BASE_COMBO(combo_lparen, 12, 13, LEFT_PARENTHESIS);
        BASE_COMBO(combo_rparen, 17, 16, RIGHT_PARENTHESIS);

        /* {} */
        BASE_COMBO(combo_lbrace, 11, 12, LEFT_BRACE);
        BASE_COMBO(combo_rbrace, 18, 17, RIGHT_BRACE);

        /* <> */
        BASE_COMBO(combo_langle, 13, 14, LESS_THAN);
        BASE_COMBO(combo_rangle, 16, 15, GREATER_THAN);

        /* [] */
        BASE_COMBO(combo_lbracket, 11, 13, LEFT_BRACKET);
        BASE_COMBO(combo_rbracket, 18, 16, RIGHT_BRACKET);

        /* Functional keys */
        BASE_COMBO(combo_backspace, 6, 7, BACKSPACE);
        BASE_COMBO(combo_delete, 7, 8, DELETE);
    };

    behaviors {
        RESHIFT(qumexm, QUESTION, EXCLAMATION);
        RESHIFT(commsc, COMMA, SEMICOLON);
        RESHIFT(dotcol, DOT, COLON);

        shcaps: shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
            mods = <MOD_LSFT>;
        };

        kk: key_key_hold_tap {
            compatible = "zmk,behaviour-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preffered";
            bindings = <&kp>, <&kp>;
        }
    };

    keymap {
        compatible = "zmk,keymap";

        base_colemak {
            display-name = "CMK";

            bindings = <
                &kp Q     &kp W     &kp F     &kp P     &kp B     &kp J     &kp L     &kp U     &kp Y     &qumexm
                &kp A     HRM_R     HRM_S     HRM_T     HRM_G     HRM_M     HRM_N     HRM_E     HRM_I     &kp O
                &kp Z     &kp X     &kp C     &kp D     &kp V     &kp K     &kp H     &commsc   &dotcol   &kp APOS
                                              TH_LOUT   TH_LIN    TH_RIN    TH_ROUT
            >;
        };

        navigation {
            display-name = "NAV";

            bindings = <
                &kp ESC   &none     &none     &none     &none     &kp PG_UP &none     &none     &none     &none
                &kp LGUI  &kp LALT  &kp LSHFT &kp LCTRL &none     &kp PG_DN N_LEFT    N_DOWN    N_UP      N_RIGHT
                &none     &none     &none     &none     &none     &none     &kp H     &kp J     &kp K     &kp L
                                              &trans    &trans    &trans    &trans
            >;
        };

        number {
            display-name = "NUM";

            bindings = <
                &none     &kp F7    &kp F8    &kp F9    &kp F12   &kp UNDER &kp N7    &kp N8    &kp N9    &none
                &none     &kp F4    &kp F5    &kp F6    &kp F11   &kp N0    &kp N4    &kp N5    &kp N6    &kp COMMA
                &none     &kp F1    &kp F2    &kp F3    &kp F10   &kp ENTER &kp N1    &kp N2    &kp N3    &kp DOT
                                              &trans    &trans    &trans    &trans
            >;
        };
    };

};
